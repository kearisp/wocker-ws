import {describe, it, expect, jest} from "@jest/globals";
import crypto from "crypto";
import {decrypt, encrypt} from "./";


describe("decrypt", () => {
    it("should decrypt an encrypted value correctly", () => {
        const encryptionKey = crypto.randomBytes(32);
        const originalValue = "test value";

        const encrypted = encrypt(encryptionKey, originalValue);
        const decrypted = decrypt(encryptionKey, encrypted);

        expect(decrypted).toBe(originalValue);
    });

    it("should throw error when using wrong encryption key", () => {
        const correctKey = crypto.randomBytes(32);
        const wrongKey = crypto.randomBytes(32);
        const originalValue = "secret message";

        const encrypted = encrypt(correctKey, originalValue);

        expect(() => {
            decrypt(wrongKey, encrypted);
        }).toThrow("Unsupported state or unable to authenticate data");
    });

    it("should throw error with malformed encrypted value", () => {
        const encryptionKey = crypto.randomBytes(32);
        const malformedValue = "not-valid-base64!";

        expect(() => {
            decrypt(encryptionKey, malformedValue);
        }).toThrow();
    });

    it("should throw error with corrupted encrypted value", () => {
        const encryptionKey = crypto.randomBytes(32);
        const originalValue = "test value";

        const encrypted = encrypt(encryptionKey, originalValue);
        // –ü–æ—à–∫–æ–¥–∂—É—î–º–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
        const corruptedEncrypted = encrypted.substring(0, encrypted.length - 5) + "XXXXX";

        expect(() => {
            decrypt(encryptionKey, corruptedEncrypted);
        }).toThrow();
    });

    it("should decrypt empty string value", () => {
        const encryptionKey = crypto.randomBytes(32);
        const originalValue = "";

        const encrypted = encrypt(encryptionKey, originalValue);
        const decrypted = decrypt(encryptionKey, encrypted);

        expect(decrypted).toBe(originalValue);
    });

    it("should decrypt UTF-8 special characters", () => {
        const encryptionKey = crypto.randomBytes(32);
        const originalValue = "–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ —ñ –µ–º–æ–¥–∑—ñ üîí üîë";

        const encrypted = encrypt(encryptionKey, originalValue);
        const decrypted = decrypt(encryptionKey, encrypted);

        expect(decrypted).toBe(originalValue);
    });

    it("should throw error with invalid key length", () => {
        const invalidKey = crypto.randomBytes(24); // AES-256 –ø–æ—Ç—Ä–µ–±—É—î 32-–±–∞–π—Ç–æ–≤–∏–π –∫–ª—é—á
        const encryptionKey = crypto.randomBytes(32);
        const originalValue = "test value";

        const encrypted = encrypt(encryptionKey, originalValue);

        expect(() => {
            decrypt(invalidKey, encrypted);
        }).toThrow();
    });

    it("should decrypt long values", () => {
        const encryptionKey = crypto.randomBytes(32);
        const longValue = "a".repeat(10000);

        const encrypted = encrypt(encryptionKey, longValue);
        const decrypted = decrypt(encryptionKey, encrypted);

        expect(decrypted).toBe(longValue);
    });

    it("should use AES-256-GCM algorithm for decryption", () => {
        const mockCreateDecipheriv = jest.spyOn(crypto, "createDecipheriv");
        const encryptionKey = crypto.randomBytes(32);
        const originalValue = "test value";

        const encrypted = encrypt(encryptionKey, originalValue);
        decrypt(encryptionKey, encrypted);

        expect(mockCreateDecipheriv).toHaveBeenCalledWith(
            "aes-256-gcm",
            expect.any(Buffer),
            expect.any(Buffer)
        );

        mockCreateDecipheriv.mockRestore();
    });

    it("should set auth tag correctly", () => {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫–∏ –¥–ª—è decipher –æ–±'—î–∫—Ç–∞
        const mockSetAuthTag = jest.fn();
        const mockUpdate = jest.fn().mockReturnValue("decrypted");
        const mockFinal = jest.fn().mockReturnValue("");

        // –ú–æ–∫—É—î–º–æ createDecipheriv, —â–æ–± –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –Ω–∞—à mock decipher
        const mockDecipher = {
            setAuthTag: mockSetAuthTag,
            update: mockUpdate,
            final: mockFinal
        };

        const mockCreateDecipheriv = jest.spyOn(crypto, "createDecipheriv")
            .mockReturnValue(mockDecipher as any);

        const encryptionKey = crypto.randomBytes(32);
        const encrypted = encrypt(crypto.randomBytes(32), "test"); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—à–∏–π –∫–ª—é—á, –æ—Å–∫—ñ–ª—å–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –≤–∞–∂–ª–∏–≤–∏–π

        try {
            decrypt(encryptionKey, encrypted);
        } catch (error) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –ª–∏—à–µ –≤–∏–∫–ª–∏–∫ setAuthTag
        }

        expect(mockSetAuthTag).toHaveBeenCalled();

        mockCreateDecipheriv.mockRestore();
    });

    // it("should extract IV, auth tag and encrypted data correctly", () => {
    //     const encryptionKey = crypto.randomBytes(32);
    //     const originalValue = "test extraction";
    //
    //     // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω—ñ –º–æ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    //     const originalCreateDecipheriv = crypto.createDecipheriv;
    //
    //     crypto.createDecipheriv = jest.fn((algorithm: any, key: any, iv: any) => {
    //         // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ iv –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
    //         expect(iv.length).toBe(12);
    //
    //         return originalCreateDecipheriv(algorithm, key, iv);
    //     }) as any;
    //
    //     // –ú–æ–∫—É—î–º–æ setAuthTag –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑–º—ñ—Ä—É authTag
    //     const originalSetAuthTag = crypto.Decipher.prototype.setAuthTag;
    //     crypto.Decipher.prototype.setAuthTag = jest.fn(function(authTag: any) {
    //         expect(authTag.length).toBe(16); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ authTag –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
    //         return originalSetAuthTag.call(this, authTag);
    //     });
    //
    //     const encrypted = encrypt(encryptionKey, originalValue);
    //     decrypt(encryptionKey, encrypted);
    //
    //     expect(crypto.createDecipheriv).toHaveBeenCalled();
    //     expect(crypto.Decipher.prototype.setAuthTag).toHaveBeenCalled();
    //
    //     // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    //     crypto.createDecipheriv = originalCreateDecipheriv;
    //     crypto.Decipher.prototype.setAuthTag = originalSetAuthTag;
    // });

    // it("should log error before throwing", () => {
    //     const consoleErrorSpy = jest.spyOn(console, "error").mockImplementation();
    //     const encryptionKey = crypto.randomBytes(32);
    //     const malformedValue = "invalid-data";
    //
    //     try {
    //         decrypt(encryptionKey, malformedValue);
    //     } catch (error) {
    //         // –û—á—ñ–∫—É—î–º–æ –ø–æ–º–∏–ª–∫—É
    //     }
    //
    //     expect(consoleErrorSpy).toHaveBeenCalledWith(
    //         "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:",
    //         expect.any(String)
    //     );
    //
    //     consoleErrorSpy.mockRestore();
    // });
});
